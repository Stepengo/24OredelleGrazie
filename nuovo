<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Torneo Pallascout - App Mobile</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #667eea;
            --primary-dark: #5a6fd8;
            --secondary: #764ba2;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --info: #3b82f6;
            --light: #f8fafc;
            --dark: #1e293b;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            min-height: 100vh;
            color: var(--dark);
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        /* Mobile-first design */
        .container {
            max-width: 100%;
            margin: 0 auto;
            padding: 10px;
        }

        @media (min-width: 768px) {
            .container {
                max-width: 1200px;
                padding: 20px;
            }
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 20px;
            text-align: center;
            box-shadow: var(--shadow-lg);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header h1 {
            font-size: 1.8rem;
            margin-bottom: 8px;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        /* Bottom Navigation for Mobile */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            padding: 10px 0;
            z-index: 1000;
            display: flex;
            justify-content: space-around;
        }

        .nav-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 8px 12px;
            text-decoration: none;
            color: #64748b;
            font-size: 0.75rem;
            transition: all 0.3s ease;
            border-radius: 12px;
            min-width: 60px;
        }

        .nav-item.active {
            color: var(--primary);
            background: rgba(102, 126, 234, 0.1);
        }

        .nav-item i {
            font-size: 1.2rem;
            margin-bottom: 4px;
        }

        @media (min-width: 768px) {
            .bottom-nav {
                position: relative;
                background: transparent;
                border: none;
                justify-content: center;
                gap: 10px;
                margin-bottom: 30px;
                padding: 0;
            }

            .nav-item {
                background: rgba(255, 255, 255, 0.9);
                padding: 15px 25px;
                border-radius: 15px;
                box-shadow: var(--shadow);
                font-size: 1rem;
                flex-direction: row;
                gap: 8px;
                min-width: auto;
            }

            .nav-item.active {
                background: linear-gradient(45deg, var(--primary), var(--secondary));
                color: white;
            }
        }

        .section {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 80px;
            box-shadow: var(--shadow-lg);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .section.active {
            display: block;
            animation: fadeInUp 0.4s ease-out;
        }

        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .section h2 {
            color: var(--dark);
            margin-bottom: 20px;
            font-size: 1.5rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            display: block;
            margin-bottom: 6px;
            font-weight: 600;
            color: var(--dark);
            font-size: 0.9rem;
        }

        .form-group input, 
        .form-group textarea, 
        .form-group select {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }

        .form-group input:focus, 
        .form-group textarea:focus, 
        .form-group select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 12px 20px;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: var(--shadow);
            text-decoration: none;
            min-height: 48px;
        }

        .btn:hover, .btn:active {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .btn-small {
            padding: 8px 16px;
            font-size: 0.85rem;
            min-height: 40px;
        }

        .btn-success { background: linear-gradient(45deg, var(--success), #059669); }
        .btn-danger { background: linear-gradient(45deg, var(--danger), #dc2626); }
        .btn-warning { background: linear-gradient(45deg, var(--warning), #d97706); }
        .btn-info { background: linear-gradient(45deg, var(--info), #2563eb); }

        .card {
            background: white;
            border-radius: 16px;
            padding: 16px;
            margin-bottom: 16px;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .grid {
            display: grid;
            gap: 16px;
            margin-bottom: 20px;
        }

        @media (min-width: 768px) {
            .grid {
                grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
                gap: 20px;
            }
        }

        /* Player Management */
        .player-form {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            align-items: end;
        }

        .player-form input {
            margin-bottom: 0;
        }

        .player-list {
            background: #f8fafc;
            border-radius: 12px;
            padding: 15px;
            margin-top: 15px;
        }

        .player-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background: white;
            border-radius: 8px;
            margin-bottom: 8px;
            border: 1px solid #e2e8f0;
        }

        .player-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .jersey-number {
            background: var(--primary);
            color: white;
            width: 32px;
            height: 32px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 0.9rem;
        }

        .match-card {
            border-left: 4px solid var(--primary);
        }

        .score-display {
            display: grid;
            grid-template-columns: 1fr auto 1fr;
            gap: 20px;
            align-items: center;
            margin: 20px 0;
            padding: 20px;
            background: linear-gradient(45deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            border-radius: 12px;
        }

        .team-score {
            text-align: center;
        }

        .team-name {
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 0.9rem;
        }

        .score {
            font-size: 2rem;
            font-weight: bold;
            color: var(--primary);
        }

        .vs {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--primary);
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-pending { background: #fef3c7; color: #92400e; }
        .status-playing { background: #dcfce7; color: #166534; }
        .status-finished { background: #dbeafe; color: #1e40af; }

        .teams-stats {
            display: grid;
            gap: 20px;
            margin-top: 20px;
        }

        @media (min-width: 768px) {
            .teams-stats { grid-template-columns: 1fr 1fr; }
        }

        .team-stats {
            background: #f8fafc;
            border-radius: 12px;
            padding: 15px;
        }

        .team-stats h4 {
            color: var(--primary);
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .player-stats-form {
            background: white;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 12px;
            border: 1px solid #e2e8f0;
        }

        .player-stats-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }

        .player-stats-inputs {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }

        .stat-input {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }

        .stat-input label {
            font-size: 0.8rem;
            font-weight: 600;
            color: #64748b;
        }

        .stat-input input {
            width: 60px;
            text-align: center;
            padding: 8px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-weight: bold;
        }

        .match-controls {
            display: flex;
            gap: 10px;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .match-controls .btn {
            flex: 1;
            min-width: 120px;
        }

        .classification-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.9rem;
            overflow-x: auto;
            display: block;
            white-space: nowrap;
        }

        @media (min-width: 768px) {
            .classification-table {
                display: table;
                font-size: 1rem;
            }
        }

        .classification-table thead {
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            color: white;
        }

        .classification-table th,
        .classification-table td {
            padding: 12px 8px;
            text-align: center;
            border-bottom: 1px solid #e2e8f0;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        @media (min-width: 768px) {
            .stats-grid { grid-template-columns: repeat(4, 1fr); }
        }

        .stat-card {
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            color: white;
            padding: 20px;
            border-radius: 16px;
            text-align: center;
            box-shadow: var(--shadow);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            left: 20px;
            padding: 15px 20px;
            background: var(--success);
            color: white;
            border-radius: 12px;
            box-shadow: var(--shadow-lg);
            z-index: 2000;
            transform: translateY(-100px);
            transition: transform 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .notification.show { transform: translateY(0); }
        .notification.error { background: var(--danger); }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #64748b;
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .csv-example {
            background: #f1f5f9;
            padding: 15px;
            border-radius: 8px;
            margin-top: 10px;
            font-family: monospace;
            font-size: 0.85rem;
            border-left: 4px solid var(--info);
        }

        .match-selection {
            background: linear-gradient(45deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-trophy"></i> Torneo Pallascout</h1>
            <p>Gestione Mobile per Arbitri</p>
        </div>

        <!-- Bottom Navigation -->
        <nav class="bottom-nav">
            <a href="#" class="nav-item active" onclick="showSection('teams', this)">
                <i class="fas fa-users"></i>
                <span>Squadre</span>
            </a>
            <a href="#" class="nav-item" onclick="showSection('matches', this)">
                <i class="fas fa-futbol"></i>
                <span>Partite</span>
            </a>
            <a href="#" class="nav-item" onclick="showSection('referee', this)">
                <i class="fas fa-whistle"></i>
                <span>Arbitro</span>
            </a>
            <a href="#" class="nav-item" onclick="showSection('classification', this)">
                <i class="fas fa-medal"></i>
                <span>Classifica</span>
            </a>
            <a href="#" class="nav-item" onclick="showSection('stats', this)">
                <i class="fas fa-chart-bar"></i>
                <span>Stats</span>
            </a>
        </nav>

        <!-- Sezione Squadre -->
        <div id="teams" class="section active">
            <h2><i class="fas fa-users"></i> Gestione Squadre</h2>
            
            <div class="form-group">
                <label><i class="fas fa-file-csv"></i> Importa da Google Form (CSV)</label>
                <input type="file" id="csvFile" accept=".csv" onchange="importFromCSV(this)">
                <div class="csv-example">
                    <strong>Formato CSV:</strong><br>
                    Nome Squadra, Nome Giocatore 1, N° Maglia 1, Nome Giocatore 2, N° Maglia 2, ...
                    <br><br>
                    <strong>Esempio:</strong><br>
                    Leoni Rossi, Marco Rossi, 7, Luigi Bianchi, 9, Paolo Verde, 11
                </div>
            </div>

            <hr style="margin: 30px 0; border: none; height: 1px; background: #e2e8f0;">

            <h3><i class="fas fa-plus"></i> Aggiungi Squadra Manualmente</h3>
            <div class="form-group">
                <label>Nome Squadra</label>
                <input type="text" id="teamName" placeholder="Es. Leoni Rossi">
            </div>

            <h4>Giocatori</h4>
            <div class="player-form">
                <div style="flex: 2;">
                    <input type="text" id="playerName" placeholder="Nome giocatore">
                </div>
                <div style="flex: 1;">
                    <input type="number" id="playerNumber" placeholder="N° Maglia" min="1" max="99">
                </div>
                <button type="button" class="btn btn-info btn-small" onclick="addPlayer()">
                    <i class="fas fa-plus"></i>
                </button>
            </div>

            <div id="currentPlayers" class="player-list" style="display: none;">
                <h5>Giocatori aggiunti:</h5>
                <div id="playersList"></div>
            </div>

            <button class="btn" onclick="addTeam()">
                <i class="fas fa-save"></i> Salva Squadra
            </button>

            <div id="teamsList"></div>
        </div>

        <!-- Sezione Partite -->
        <div id="matches" class="section">
            <h2><i class="fas fa-futbol"></i> Gestione Partite</h2>
            
            <div class="form-group">
                <label>Squadra Casa</label>
                <select id="homeTeam">
                    <option value="">Seleziona squadra casa</option>
                </select>
            </div>
            <div class="form-group">
                <label>Squadra Ospite</label>
                <select id="awayTeam">
                    <option value="">Seleziona squadra ospite</option>
                </select>
            </div>
            <div class="form-group">
                <label>Arbitro</label>
                <input type="text" id="referee" placeholder="Nome arbitro">
            </div>
            <button class="btn" onclick="createMatch()">
                <i class="fas fa-plus"></i> Crea Partita
            </button>

            <div id="matchesList"></div>
        </div>

        <!-- Sezione Arbitro -->
        <div id="referee" class="section">
            <h2><i class="fas fa-whistle"></i> Pannello Arbitro</h2>
            
            <div class="match-selection">
                <div class="form-group mb-0">
                    <label><i class="fas fa-list"></i> Le Mie Partite</label>
                    <select id="refereeMatches" onchange="selectMatchForReferee(this.value)">
                        <option value="">Seleziona una partita da arbitrare</option>
                    </select>
                </div>
            </div>

            <div id="matchRefereeForm" style="display: none;"></div>
        </div>

        <!-- Sezione Classifica -->
        <div id="classification" class="section">
            <h2><i class="fas fa-medal"></i> Classifica Generale</h2>
            <div id="classificationTable"></div>
        </div>

        <!-- Sezione Statistiche -->
        <div id="stats" class="section">
            <h2><i class="fas fa-chart-bar"></i> Statistiche Torneo</h2>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="totalTeams">0</div>
                    <div>Squadre</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="totalMatches">0</div>
                    <div>Partite</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="totalGoals">0</div>
                    <div>Gol Totali</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="totalScalps">0</div>
                    <div>Scalpi Totali</div>
                </div>
            </div>
            
            <div class="card">
                <h3><i class="fas fa-trophy"></i> Top Marcatori</h3>
                <div id="topScorers"></div>
            </div>

            <div class="card">
                <h3><i class="fas fa-fire"></i> Top Scalpi</h3>
                <div id="topScalpers"></div>
            </div>
        </div>
    </div>

    <div id="notification" class="notification"></div>

    <script>
        let teams = JSON.parse(localStorage.getItem('pallascout_teams')) || [];
        let matches = JSON.parse(localStorage.getItem('pallascout_matches')) || [];
        let currentPlayers = [];

        document.addEventListener('DOMContentLoaded', function() {
            updateTeamsList();
            updateMatchesList();
            updateRefereeMatches();
            updateClassification();
            updateStats();
            populateTeamSelects();
        });

        function showSection(sectionId, element) {
            document.querySelectorAll('.section').forEach(section => {
                section.classList.remove('active');
            });
            document.querySelectorAll('.nav-item').forEach(tab => {
                tab.classList.remove('active');
            });
            
            document.getElementById(sectionId).classList.add('active');
            element.classList.add('active');
            
            if (sectionId === 'classification') updateClassification();
            if (sectionId === 'stats') updateStats();
        }

        function importFromCSV(input) {
            const file = input.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                const csv = e.target.result;
                const lines = csv.split('\n');
                
                lines.forEach((line, index) => {
                    if (line.trim() === '') return;
                    
                    const data = line.split(',').map(item => item.trim());
                    if (data.length >= 3) {
                        const teamName = data[0];
                        const players = [];
                        
                        // Parse giocatori: nome, numero, nome, numero, ...
                        for (let i = 1; i < data.length; i += 2) {
                            if (data[i] && data[i + 1]) {
                                const playerName = data[i];
                                const playerNumber = parseInt(data[i + 1]);
                                if (playerName && !isNaN(playerNumber)) {
                                    players.push({
                                        name: playerName,
                                        number: playerNumber
                                    });
                                }
                            }
                        }
                        
                        if (teamName && players.length > 0) {
                            const existingTeam = teams.find(t => t.name === teamName);
                            if (!existingTeam) {
                                teams.push({
                                    id: Date.now() + index,
                                    name: teamName,
                                    players: players
                                });
                            }
                        }
                    }
                });
                
                saveData();
                updateTeamsList();
                populateTeamSelects();
                showNotification('Squadre importate con successo!');
            };
            reader.readAsText(file);
        }

        function addPlayer() {
            const name = document.getElementById('playerName').value.trim();
            const number = parseInt(document.getElementById('playerNumber').value);
            
            if (!name || isNaN(number)) {
                showNotification('Inserisci nome e numero del giocatore', 'error');
                return;
            }
            
            if (currentPlayers.find(p => p.number === number)) {
                showNotification('Numero di maglia già utilizzato', 'error');
                return;
            }
            
            currentPlayers.push({ name, number });
            
            document.getElementById('playerName').value = '';
            document.getElementById('playerNumber').value = '';
            
            updateCurrentPlayersList();
        }

        function updateCurrentPlayersList() {
            const container = document.getElementById('currentPlayers');
            const list = document.getElementById('playersList');
            
            if (currentPlayers.length === 0) {
                container.style.display = 'none';
                return;
            }
            
            container.style.display = 'block';
            list.innerHTML = currentPlayers.map((player, index) => `
                <div class="player-item">
                    <div class="player-info">
                        <div class="jersey-number">${player.number}</div>
                        <span>${player.name}</span>
                    </div>
                    <button class="btn btn-danger btn-small" onclick="removeCurrentPlayer(${index})">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `).join('');
        }

        function removeCurrentPlayer(index) {
            currentPlayers.splice(index, 1);
            updateCurrentPlayersList();
        }

        function addTeam() {
            const name = document.getElementById('teamName').value.trim();
            
            if (!name) {
                showNotification('Inserisci il nome della squadra', 'error');
                return;
            }
            
            if (currentPlayers.length === 0) {
                showNotification('Aggiungi almeno un giocatore', 'error');
                return;
            }
            
            const existingTeam = teams.find(t => t.name === name);
            if (existingTeam) {
                showNotification('Squadra con questo nome già esistente', 'error');
                return;
            }
            
            teams.push({
                id: Date.now(),
                name: name,
                players: [...currentPlayers]
            });
            
            // Reset form
            document.getElementById('teamName').value = '';
            currentPlayers = [];
            updateCurrentPlayersList();
            
            saveData();
            updateTeamsList();
            populateTeamSelects();
            showNotification('Squadra aggiunta con successo!');
        }

        function updateTeamsList() {
            const container = document.getElementById('teamsList');
            if (teams.length === 0) {
                container.innerHTML = '<div class="empty-state"><i class="fas fa-users"></i><p>Nessuna squadra registrata</p></div>';
                return;
            }
            
            container.innerHTML = `
                <h3 style="margin-top: 30px;">Squadre Registrate (${teams.length})</h3>
                <div class="grid">
                    ${teams.map(team => `
                        <div class="card">
                            <h4>${team.name}</h4>
                            <div class="player-list">
                                ${team.players.map(player => `
                                    <div class="player-item">
                                        <div class="player-info">
                                            <div class="jersey-number">${player.number}</div>
                                            <span>${player.name}</span>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                            <button class="btn btn-danger btn-small" style="margin-top: 15px;" onclick="deleteTeam(${team.id})">
                                <i class="fas fa-trash"></i> Elimina
                            </button>
                        </div>
                    `).join('')}
                </div>
            `;
        }

        function populateTeamSelects() {
            const homeSelect = document.getElementById('homeTeam');
            const awaySelect = document.getElementById('awayTeam');
            
            const options = '<option value="">Seleziona squadra</option>' + 
                teams.map(team => `<option value="${team.id}">${team.name}</option>`).join('');
            
            homeSelect.innerHTML = options;
            awaySelect.innerHTML = options;
        }

        function createMatch() {
            const homeTeamId = parseInt(document.getElementById('homeTeam').value);
            const awayTeamId = parseInt(document.getElementById('awayTeam').value);
            const referee = document.getElementById('referee').value.trim();
            
            if (!homeTeamId || !awayTeamId || !referee) {
                showNotification('Seleziona entrambe le squadre e inserisci l\'arbitro', 'error');
                return;
            }
            
            if (homeTeamId === awayTeamId) {
                showNotification('Le squadre devono essere diverse', 'error');
                return;
            }
            
            const match = {
                id: Date.now(),
                homeTeamId: homeTeamId,
                awayTeamId: awayTeamId,
                referee: referee,
                status: 'pending',
                homeScore: 0,
                awayScore: 0,
                playerStats: {},
                mvpHome: null,
                mvpAway: null,
                startTime: null,
                endTime: null
            };
            
            matches.push(match);
            
            document.getElementById('homeTeam').value = '';
            document.getElementById('awayTeam').value = '';
            document.getElementById('referee').value = '';
            
            saveData();
            updateMatchesList();
            updateRefereeMatches();
            showNotification('Partita creata con successo!');
        }

        function updateMatchesList() {
            const container = document.getElementById('matchesList');
            if (matches.length === 0) {
                container.innerHTML = '<div class="empty-state"><i class="fas fa-futbol"></i><p>Nessuna partita creata</p></div>';
                return;
            }
            
            container.innerHTML = `
                <h3 style="margin-top: 30px;">Partite del Torneo (${matches.length})</h3>
                <div class="grid">
                    ${matches.map(match => {
                        const homeTeam = teams.find(t => t.id === match.homeTeamId);
                        const awayTeam = teams.find(t => t.id === match.awayTeamId);
                        return `
                            <div class="card match-card">
                                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-wrap: wrap; gap: 10px;">
                                    <h4>${homeTeam?.name || 'Squadra non trovata'} vs ${awayTeam?.name || 'Squadra non trovata'}</h4>
                                    <span class="status-badge status-${match.status}">
                                        ${match.status === 'pending' ? 'In attesa' : 
                                          match.status === 'playing' ? 'In corso' : 'Finita'}
                                    </span>
                                </div>
                                <div class="score-display">
                                    <div class="team-score">
                                        <div class="team-name">${homeTeam?.name || 'N/A'}</div>
                                        <div class="score">${match.homeScore}</div>
                                    </div>
                                    <div class="vs">VS</div>
                                    <div class="team-score">
                                        <div class="team-name">${awayTeam?.name || 'N/A'}</div>
                                        <div class="score">${match.awayScore}</div>
                                    </div>
                                </div>
                                <p><strong>Arbitro:</strong> ${match.referee}</p>
                                ${match.mvpHome || match.mvpAway ? `
                                    <div style="margin-top: 10px;">
                                        <strong>MVP:</strong>
                                        ${match.mvpHome ? `${homeTeam?.name}: ${match.mvpHome}` : ''}
                                        ${match.mvpHome && match.mvpAway ? ' | ' : ''}
                                        ${match.mvpAway ? `${awayTeam?.name}: ${match.mvpAway}` : ''}
                                    </div>
                                ` : ''}
                                <button class="btn btn-danger btn-small" style="margin-top: 15px;" onclick="deleteMatch(${match.id})">
                                    <i class="fas fa-trash"></i> Elimina
                                </button>
                            </div>
                        `;
                    }).join('')}
                </div>
            `;
        }

        function updateRefereeMatches() {
            const select = document.getElementById('refereeMatches');
            const pendingMatches = matches.filter(m => m.status !== 'finished');
            
            select.innerHTML = '<option value="">Seleziona una partita da arbitrare</option>' +
                pendingMatches.map(match => {
                    const homeTeam = teams.find(t => t.id === match.homeTeamId);
                    const awayTeam = teams.find(t => t.id === match.awayTeamId);
                    return `<option value="${match.id}">${homeTeam?.name || 'N/A'} vs ${awayTeam?.name || 'N/A'} (${match.referee})</option>`;
                }).join('');
        }

        function selectMatchForReferee(matchId) {
            const container = document.getElementById('matchRefereeForm');
            
            if (!matchId) {
                container.style.display = 'none';
                return;
            }
            
            const match = matches.find(m => m.id === parseInt(matchId));
            const homeTeam = teams.find(t => t.id === match.homeTeamId);
            const awayTeam = teams.find(t => t.id === match.awayTeamId);
            
            container.style.display = 'block';
            container.innerHTML = `
                <div class="card">
                    <h3>${homeTeam.name} vs ${awayTeam.name}</h3>
                    
                    <div class="score-display">
                        <div class="team-score">
                            <div class="team-name">${homeTeam.name}</div>
                            <input type="number" id="homeScore" value="${match.homeScore}" min="0" 
                                   style="width: 80px; text-align: center; font-size: 1.5rem; font-weight: bold;">
                        </div>
                        <div class="vs">VS</div>
                        <div class="team-score">
                            <div class="team-name">${awayTeam.name}</div>
                            <input type="number" id="awayScore" value="${match.awayScore}" min="0" 
                                   style="width: 80px; text-align: center; font-size: 1.5rem; font-weight: bold;">
                        </div>
                    </div>
                    
                    <div class="teams-stats">
                        <div class="team-stats">
                            <h4><i class="fas fa-home"></i> ${homeTeam.name}</h4>
                            ${homeTeam.players.map(player => `
                                <div class="player-stats-form">
                                    <div class="player-stats-header">
                                        <div class="jersey-number">${player.number}</div>
                                        <strong>${player.name}</strong>
                                    </div>
                                    <div class="player-stats-inputs">
                                        <div class="stat-input">
                                            <label>Gol</label>
                                            <input type="number" id="goals_home_${player.number}" 
                                                   value="${match.playerStats[`home_${player.number}`]?.goals || 0}" min="0"
                                                   onchange="quickSave(${match.id})">
                                        </div>
                                        <div class="stat-input">
                                            <label>Scalpi</label>
                                            <input type="number" id="scalps_home_${player.number}" 
                                                   value="${match.playerStats[`home_${player.number}`]?.scalps || 0}" min="0"
                                                   onchange="quickSave(${match.id})">
                                        </div>
                                    </div>
                                </div>
                            `).join('')}
                            <div class="form-group" style="margin-top: 20px;">
                                <label>MVP ${homeTeam.name}</label>
                                <select id="mvpHome" onchange="quickSave(${match.id})">
                                    <option value="">Seleziona MVP</option>
                                    ${homeTeam.players.map(player => 
                                        `<option value="${player.name}" ${match.mvpHome === player.name ? 'selected' : ''}>${player.name} #${player.number}</option>`
                                    ).join('')}
                                </select>
                            </div>
                        </div>
                        
                        <div class="team-stats">
                            <h4><i class="fas fa-plane"></i> ${awayTeam.name}</h4>
                            ${awayTeam.players.map(player => `
                                <div class="player-stats-form">
                                    <div class="player-stats-header">
                                        <div class="jersey-number">${player.number}</div>
                                        <strong>${player.name}</strong>
                                    </div>
                                    <div class="player-stats-inputs">
                                        <div class="stat-input">
                                            <label>Gol</label>
                                            <input type="number" id="goals_away_${player.number}" 
                                                   value="${match.playerStats[`away_${player.number}`]?.goals || 0}" min="0"
                                                   onchange="quickSave(${match.id})">
                                        </div>
                                        <div class="stat-input">
                                            <label>Scalpi</label>
                                            <input type="number" id="scalps_away_${player.number}" 
                                                   value="${match.playerStats[`away_${player.number}`]?.scalps || 0}" min="0"
                                                   onchange="quickSave(${match.id})">
                                        </div>
                                    </div>
                                </div>
                            `).join('')}
                            <div class="form-group" style="margin-top: 20px;">
                                <label>MVP ${awayTeam.name}</label>
                                <select id="mvpAway" onchange="quickSave(${match.id})">
                                    <option value="">Seleziona MVP</option>
                                    ${awayTeam.players.map(player => 
                                        `<option value="${player.name}" ${match.mvpAway === player.name ? 'selected' : ''}>${player.name} #${player.number}</option>`
                                    ).join('')}
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="match-controls">
                        <button class="btn btn-success" onclick="startMatch(${match.id})" ${match.status === 'playing' ? 'style="display:none;"' : ''}>
                            <i class="fas fa-play"></i> Inizia
                        </button>
                        <button class="btn" onclick="saveMatchData(${match.id})">
                            <i class="fas fa-save"></i> Salva
                        </button>
                        <button class="btn btn-danger" onclick="endMatch(${match.id})" ${match.status !== 'playing' ? 'style="display:none;"' : ''}>
                            <i class="fas fa-stop"></i> Termina
                        </button>
                    </div>
                </div>
            `;
        }

        function quickSave(matchId) {
            setTimeout(() => saveMatchData(matchId), 500);
        }

        function startMatch(matchId) {
            const match = matches.find(m => m.id === matchId);
            match.status = 'playing';
            match.startTime = new Date().toISOString();
            
            saveData();
            updateMatchesList();
            updateRefereeMatches();
            showNotification('Partita iniziata!');
            
            selectMatchForReferee(matchId);
        }

        function saveMatchData(matchId) {
            const match = matches.find(m => m.id === matchId);
            const homeTeam = teams.find(t => t.id === match.homeTeamId);
            const awayTeam = teams.find(t => t.id === match.awayTeamId);
            
            match.homeScore = parseInt(document.getElementById('homeScore').value) || 0;
            match.awayScore = parseInt(document.getElementById('awayScore').value) || 0;
            
            match.mvpHome = document.getElementById('mvpHome').value || null;
            match.mvpAway = document.getElementById('mvpAway').value || null;
            
            match.playerStats = {};
            
            homeTeam.players.forEach(player => {
                const goals = parseInt(document.getElementById(`goals_home_${player.number}`).value) || 0;
                const scalps = parseInt(document.getElementById(`scalps_home_${player.number}`).value) || 0;
                match.playerStats[`home_${player.number}`] = { goals, scalps };
            });
            
            awayTeam.players.forEach(player => {
                const goals = parseInt(document.getElementById(`goals_away_${player.number}`).value) || 0;
                const scalps = parseInt(document.getElementById(`scalps_away_${player.number}`).value) || 0;
                match.playerStats[`away_${player.number}`] = { goals, scalps };
            });
            
            saveData();
            updateMatchesList();
            showNotification('Dati salvati!');
        }

        function endMatch(matchId) {
            const match = matches.find(m => m.id === matchId);
            match.status = 'finished';
            match.endTime = new Date().toISOString();
            
            saveMatchData(matchId);
            
            updateMatchesList();
            updateRefereeMatches();
            updateClassification();
            updateStats();
            showNotification('Partita terminata!');
            
            document.getElementById('matchRefereeForm').style.display = 'none';
            document.getElementById('refereeMatches').value = '';
        }

        function calculateClassification() {
            const classification = teams.map(team => {
                let points = 0;
                let played = 0;
                let won = 0;
                let drawn = 0;
                let lost = 0;
                let goalsFor = 0;
                let goalsAgainst = 0;
                let totalGoals = 0;
                let totalScalps = 0;
                
                matches.filter(m => m.status === 'finished').forEach(match => {
                    let isHome = match.homeTeamId === team.id;
                    let isAway = match.awayTeamId === team.id;
                    
                    if (isHome || isAway) {
                        played++;
                        
                        if (isHome) {
                            goalsFor += match.homeScore;
                            goalsAgainst += match.awayScore;
                            
                            if (match.homeScore > match.awayScore) {
                                won++;
                                points += 3;
                            } else if (match.homeScore === match.awayScore) {
                                drawn++;
                                points += 1;
                            } else {
                                lost++;
                            }
                            
                            team.players.forEach(player => {
                                const stats = match.playerStats[`home_${player.number}`];
                                if (stats) {
                                    totalGoals += stats.goals;
                                    totalScalps += stats.scalps;
                                }
                            });
                        } else {
                            goalsFor += match.awayScore;
                            goalsAgainst += match.homeScore;
                            
                            if (match.awayScore > match.homeScore) {
                                won++;
                                points += 3;
                            } else if (match.awayScore === match.homeScore) {
                                drawn++;
                                points += 1;
                            } else {
                                lost++;
                            }
                            
                            team.players.forEach(player => {
                                const stats = match.playerStats[`away_${player.number}`];
                                if (stats) {
                                    totalGoals += stats.goals;
                                    totalScalps += stats.scalps;
                                }
                            });
                        }
                    }
                });
                
                return {
                    ...team,
                    points,
                    played,
                    won,
                    drawn,
                    lost,
                    goalsFor,
                    goalsAgainst,
                    goalDifference: goalsFor - goalsAgainst,
                    totalGoals,
                    totalScalps
                };
            });
            
            return classification.sort((a, b) => {
                if (b.points !== a.points) return b.points - a.points;
                if (b.goalDifference !== a.goalDifference) return b.goalDifference - a.goalDifference;
                return b.goalsFor - a.goalsFor;
            });
        }

        function updateClassification() {
            const container = document.getElementById('classificationTable');
            const classification = calculateClassification();
            
            if (classification.length === 0) {
                container.innerHTML = '<div class="empty-state"><i class="fas fa-medal"></i><p>Nessuna squadra registrata</p></div>';
                return;
            }
            
            container.innerHTML = `
                <table class="classification-table">
                    <thead>
                        <tr>
                            <th>Pos</th>
                            <th>Squadra</th>
                            <th>G</th>
                            <th>V</th>
                            <th>P</th>
                            <th>S</th>
                            <th>GF</th>
                            <th>GS</th>
                            <th>DR</th>
                            <th>Pt</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${classification.map((team, index) => `
                            <tr>
                                <td><strong>${index + 1}</strong></td>
                                <td><strong>${team.name}</strong></td>
                                <td>${team.played}</td>
                                <td>${team.won}</td>
                                <td>${team.drawn}</td>
                                <td>${team.lost}</td>
                                <td>${team.goalsFor}</td>
                                <td>${team.goalsAgainst}</td>
                                <td>${team.goalDifference > 0 ? '+' : ''}${team.goalDifference}</td>
                                <td><strong>${team.points}</strong></td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
        }

        function updateStats() {
            const finishedMatches = matches.filter(m => m.status === 'finished');
            let totalGoals = 0;
            let totalScalps = 0;
            let playerStats = {};
            
            finishedMatches.forEach(match => {
                Object.entries(match.playerStats || {}).forEach(([key, stats]) => {
                    totalGoals += stats.goals;
                    totalScalps += stats.scalps;
                    
                    const playerNumber = key.replace(/^(home_|away_)/, '');
                    const team = teams.find(t => 
                        t.players.some(p => p.number == playerNumber)
                    );
                    
                    if (team) {
                        const player = team.players.find(p => p.number == playerNumber);
                        if (player) {
                            const playerKey = `${player.name} (${team.name})`;
                            if (!playerStats[playerKey]) {
                                playerStats[playerKey] = { goals: 0, scalps: 0 };
                            }
                            playerStats[playerKey].goals += stats.goals;
                            playerStats[playerKey].scalps += stats.scalps;
                        }
                    }
                });
            });
            
            document.getElementById('totalTeams').textContent = teams.length;
            document.getElementById('totalMatches').textContent = matches.length;
            document.getElementById('totalGoals').textContent = totalGoals;
            document.getElementById('totalScalps').textContent = totalScalps;
            
            const topScorers = Object.entries(playerStats)
                .sort((a, b) => b[1].goals - a[1].goals)
                .slice(0, 10);
            
            document.getElementById('topScorers').innerHTML = topScorers.length > 0 ? `
                <ol>
                    ${topScorers.map(([player, stats]) => 
                        `<li><strong>${player}</strong> - ${stats.goals} gol</li>`
                    ).join('')}
                </ol>
            ` : '<div class="empty-state"><p>Nessun dato disponibile</p></div>';
            
            const topScalpers = Object.entries(playerStats)
                .sort((a, b) => b[1].scalps - a[1].scalps)
                .slice(0, 10);
            
            document.getElementById('topScalpers').innerHTML = topScalpers.length > 0 ? `
                <ol>
                    ${topScalpers.map(([player, stats]) => 
                        `<li><strong>${player}</strong> - ${stats.scalps} scalpi</li>`
                    ).join('')}
                </ol>
            ` : '<div class="empty-state"><p>Nessun dato disponibile</p></div>';
        }

        function deleteTeam(teamId) {
            if (confirm('Sei sicuro di voler eliminare questa squadra? Verranno eliminate anche tutte le sue partite.')) {
                teams = teams.filter(t => t.id !== teamId);
                matches = matches.filter(m => m.homeTeamId !== teamId && m.awayTeamId !== teamId);
                
                saveData();
                updateTeamsList();
                updateMatchesList();
                updateRefereeMatches();
                updateClassification();
                updateStats();
                populateTeamSelects();
                showNotification('Squadra eliminata');
            }
        }

        function deleteMatch(matchId) {
            if (confirm('Sei sicuro di voler eliminare questa partita?')) {
                matches = matches.filter(m => m.id !== matchId);
                
                saveData();
                updateMatchesList();
                updateRefereeMatches();
                updateClassification();
                updateStats();
                showNotification('Partita eliminata');
            }
        }

        function saveData() {
            localStorage.setItem('pallascout_teams', JSON.stringify(teams));
            localStorage.setItem('pallascout_matches', JSON.stringify(matches));
        }

        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }
    </script>
</body>
</html>
